#!/usr/bin/env python3
"""
Script para iniciar la API de transcripci√≥n con manejo de errores mejorado
"""
import sys
import os
import signal
import logging
import uvicorn
from pathlib import Path

def setup_graceful_shutdown():
    """Configura manejo de se√±ales para cierre graceful"""
    def signal_handler(signum, frame):
        logging.info(f"Recibida se√±al {signum}, cerrando aplicaci√≥n...")
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

def check_dependencies():
    """Verifica que todas las dependencias est√©n disponibles"""
    try:
        import whisper
        import ffmpeg
        import magic
        logging.info("‚úÖ Todas las dependencias est√°n disponibles")
        return True
    except ImportError as e:
        logging.error(f"‚ùå Dependencia faltante: {e}")
        return False

def check_system_resources():
    """Verifica recursos del sistema"""
    import psutil
    
    # Verificar memoria
    memory = psutil.virtual_memory()
    available_gb = memory.available / (1024**3)
    
    if available_gb < 2:
        logging.warning(f"‚ö†Ô∏è Poca memoria disponible: {available_gb:.1f}GB")
    else:
        logging.info(f"‚úÖ Memoria disponible: {available_gb:.1f}GB")
    
    # Verificar espacio en disco
    disk = psutil.disk_usage('.')
    free_gb = disk.free / (1024**3)
    
    if free_gb < 5:
        logging.warning(f"‚ö†Ô∏è Poco espacio en disco: {free_gb:.1f}GB")
    else:
        logging.info(f"‚úÖ Espacio en disco: {free_gb:.1f}GB")

def create_directories():
    """Crea directorios necesarios"""
    try:
        directories = [
            "./temp",
            "./temp/uploads", 
            "./temp/audio",
            "./temp/srt",
            "./temp/whisper_cache"
        ]
        
        for dir_path in directories:
            Path(dir_path).mkdir(parents=True, exist_ok=True)
            
        logging.info("‚úÖ Directorios creados correctamente")
        return True
    except Exception as e:
        logging.error(f"‚ùå Error creando directorios: {e}")
        return False

def main():
    """Funci√≥n principal para iniciar la API"""
    # Configurar logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('startup.log')
        ]
    )
    
    logging.info("üöÄ Iniciando API de Transcripci√≥n de Videos...")
    
    # Verificaciones previas
    if not check_dependencies():
        logging.error("‚ùå Faltan dependencias cr√≠ticas. Instalando...")
        os.system("pip install -r requirements.txt")
    
    check_system_resources()
    
    if not create_directories():
        logging.error("‚ùå No se pudieron crear directorios necesarios")
        sys.exit(1)
    
    # Configurar manejo de se√±ales
    setup_graceful_shutdown()
    
    try:
        logging.info("üåê Iniciando servidor Uvicorn...")
        
        # Configuraci√≥n del servidor
        config = uvicorn.Config(
            app="app.main:app",
            host="0.0.0.0", 
            port=8000,
            reload=True,
            reload_dirs=["./app"],
            log_level="info",
            access_log=True,
            use_colors=True,
            timeout_keep_alive=30,
            timeout_notify=30,
            limit_concurrency=10,
            limit_max_requests=1000
        )
        
        server = uvicorn.Server(config)
        
        logging.info("‚úÖ Servidor configurado correctamente")
        logging.info("üì° API disponible en: http://localhost:8000")
        logging.info("üìö Documentaci√≥n en: http://localhost:8000/docs")
        logging.info("üè• Health check en: http://localhost:8000/api/v1/health")
        logging.info("üåç Idiomas soportados en: http://localhost:8000/api/v1/languages")
        logging.info("üîë API Key para pruebas: dev_api_key_12345")
        
        # Iniciar servidor
        server.run()
        
    except Exception as e:
        logging.error(f"‚ùå Error cr√≠tico al iniciar servidor: {e}")
        logging.exception("Detalles del error:")
        sys.exit(1)

if __name__ == "__main__":
    main()